#include <PinChangeInt.h>
#include <PID_v1.h>
#define encodPinA1      2                           // Quadrature encoder A pin
#define encodPinB1      3                           // Quadrature encoder B pin
#define M1              5                           // PWM outputs to L298N H-Bridge motor driver module
#define M2              6

double value=0;
double kp = 27.0 , ki = 0.0, kd = 0.0;                     // modify for optimal performance
double input = 0, output = 0, setpoint = 0;
long temp;
volatile long encoderPos = 0;

PID myPID(&input, &output, &setpoint, kp, ki, kd, DIRECT);  // if motor will only run at full speed try 'REVERSE' instead of 'DIRECT'

void setup() {
 pinMode(encodPinA1, INPUT_PULLUP);                  // quadrature encoder input A 
 pinMode(encodPinB1, INPUT_PULLUP);                  // quadrature encoder input B
 pinMode(button, INPUT_PULLUP);
 attachInterrupt(digitalPinToInterrupt(3) ,count1,FALLING);// update encoder position
 TCCR1B = TCCR1B & 0b11111000 | 1;                   // set 31KHz PWM to prevent motor noise
 myPID.SetMode(AUTOMATIC);
 myPID.SetSampleTime(1);
 myPID.SetOutputLimits(-255, 255);
 Serial.begin (115200);                              // for debugging
 setpoint = 0;                                       // modify to fit motor and encoder characteristics, potmeter connected to A0
}

void loop() {
 setpoint = rotaryPos()*200;
 input = encoderPos ;                                // data from encoder
 Serial.print(encoderPos);                           // monitor motor position
 myPID.Compute();                                    // calculate new output
 pwmOut(output);
 Serial.print("  -  ");
 Serial.print(output);// drive L298N H-Bridge module
 Serial.print("  -  ");
 Serial.println(setpoint);// drive L298N H-Bridge module    
}

void pwmOut(int out) {                                // to H-Bridge board
 if (out > 0) {
   analogWrite(M1, out);                              // drive motor CW
   analogWrite(M2, 0);
 }
 else {
   analogWrite(M1, 0);
   analogWrite(M2, abs(out));                         // drive motor CCW
 }
}
double rotaryPos(void){
  value = analogRead(A0);
  if(value >=0 && value<=45) return -5.0;
  else if(value<=135) return -4.0;
  else if(value<=231) return -3.0;
  else if(value<=324) return -2.0;
  else if(value<=417) return -1.0;
  else if(value<=510) return 0.0;
  else if(value<=603) return 1.0;
  else if(value<=695) return 2.0;
  else if(value<=785) return 3.0;
  else if(value<=877) return 4.0;
  else if(value<=974) return 5.0;
  else return 6.0;
}
void count1() {
 if (digitalRead(encodPinA1)==HIGH){encoderPos--;}else{encoderPos++;}
}
